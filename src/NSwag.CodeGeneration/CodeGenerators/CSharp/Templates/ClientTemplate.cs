// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NSwag.CodeGeneration.CodeGenerators.CSharp.Templates
{
    using NJsonSchema.CodeGeneration;
    using NSwag.CodeGeneration.CodeGenerators.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    internal partial class ClientTemplate : ClientTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 5 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
if (Model.HasOperations)
{
    if (Model.GenerateContracts && Model.GenerateClientInterfaces)
    {

            
            #line default
            #line hidden
            this.Write("public partial interface I");
            
            #line 10 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Class));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 12 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

        foreach (var operation in Model.Operations)
        {
            GenerateMethodDocumentation(operation, false);
            GenerateMethodSignature(operation, false);
            Write(";");

            GenerateMethodDocumentation(operation, true);
            GenerateMethodSignature(operation, true);
            Write(";");
        }

            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 25 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

    }

    if (Model.GenerateImplementation)
    {

            
            #line default
            #line hidden
            this.Write("\r\npublic partial class ");
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Class));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
if (Model.HasBaseType){
            
            #line default
            #line hidden
            this.Write(": ");
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
if (Model.HasBaseClass){
            
            #line default
            #line hidden
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.BaseClass));
            
            #line default
            #line hidden
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
if (Model.GenerateClientInterfaces){
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
}
            
            #line default
            #line hidden
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
if (Model.GenerateClientInterfaces){
            
            #line default
            #line hidden
            this.Write("I");
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Class));
            
            #line default
            #line hidden
            
            #line 32 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public ");
            
            #line 35 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Class));
            
            #line default
            #line hidden
            this.Write("() : this(\"");
            
            #line 35 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.BaseUrl));
            
            #line default
            #line hidden
            this.Write("\") { }\r\n\r\n    public ");
            
            #line 37 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Class));
            
            #line default
            #line hidden
            this.Write("(string baseUrl)\r\n    {\r\n        BaseUrl = baseUrl; \r\n    }\r\n\r\n    public string " +
                    "BaseUrl { get; set; }\r\n\r\n");
            
            #line 44 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

    foreach (var operation in Model.Operations)
    {
        GenerateMethodDocumentation(operation, false);
        Write("    public ");
        GenerateMethodSignature(operation, false);

            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        return ");
            
            #line 53 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.OperationNameUpper));
            
            #line default
            #line hidden
            this.Write("Async(");
            
            #line 53 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
foreach (var parameter in operation.Parameters){
            
            #line default
            #line hidden
            
            #line 53 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 53 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("CancellationToken.None);\r\n    }\r\n\r\n");
            
            #line 56 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

        GenerateMethodDocumentation(operation, true);
        Write("    public async ");
        GenerateMethodSignature(operation, true);

            
            #line default
            #line hidden
            this.Write("    \r\n    {\r\n        var url = \"");
            
            #line 63 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.Path));
            
            #line default
            #line hidden
            this.Write("?\";\r\n");
            
            #line 64 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

        foreach (var parameter in operation.PathParameters)
        {

            
            #line default
            #line hidden
            this.Write("        if (");
            
            #line 68 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n        {\r\n            throw new ArgumentNullException(\"");
            
            #line 70 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write("\");\r\n        }\r\n\r\n");
            
            #line 73 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            if (parameter.IsDateArray)
            {

            
            #line default
            #line hidden
            this.Write("        url = url.Replace(\"{");
            
            #line 77 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("}\", Uri.EscapeUriString(string.Join(\",\", ");
            
            #line 77 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(".Select(s => s.ToString(\"s\", CultureInfo.InvariantCulture)))));\r\n");
            
            #line 78 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
            else if (parameter.IsDate)
            {

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\r\n        url = url.Replace(\"{");
            
            #line 83 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("}\", Uri.EscapeUriString(");
            
            #line 83 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(".ToString(\"s\", CultureInfo.InvariantCulture)));\r\n");
            
            #line 84 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
            else if (parameter.IsArray)
            {

            
            #line default
            #line hidden
            this.Write("        url = url.Replace(\"{");
            
            #line 89 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("}\", Uri.EscapeUriString(string.Join(\",\", ");
            
            #line 89 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(".Select(s => s.ToString()))));\r\n");
            
            #line 90 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

            }
            else
            {

            
            #line default
            #line hidden
            this.Write("        url = url.Replace(\"{");
            
            #line 95 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("}\", Uri.EscapeUriString(");
            
            #line 95 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(".ToString()));\r\n");
            
            #line 96 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
        }

        foreach (var parameter in operation.QueryParameters)
        {
            if (!parameter.IsNullable)
            {

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\r\n        if (");
            
            #line 105 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n        {\r\n            throw new ArgumentNullException(\"");
            
            #line 107 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write("\");\r\n        }\r\n");
            
            #line 109 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }

  
            if (parameter.IsDateArray)
            {

            
            #line default
            #line hidden
            this.Write("        if (");
            
            #line 116 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n        {\r\n            foreach (var item in ");
            
            #line 118 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(") \r\n            { \r\n                url += string.Format(\"");
            
            #line 120 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("={0}&\", Uri.EscapeUriString(item.ToString(\"s\", CultureInfo.InvariantCulture))); \r" +
                    "\n            }\r\n");
            
            #line 122 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
            else if (parameter.IsDate)
            {

            
            #line default
            #line hidden
            this.Write("            url += string.Format(\"");
            
            #line 127 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("={0}&\", Uri.EscapeUriString(");
            
            #line 127 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(" != null ? ");
            
            #line 127 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            
            #line 127 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
if (parameter.Type.EndsWith("?")){
            
            #line default
            #line hidden
            this.Write(".Value");
            
            #line 127 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(".ToString(\"s\", CultureInfo.InvariantCulture) : \"null\"));\r\n");
            
            #line 128 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
            else if (parameter.IsArray)
            {

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\r\n            if (");
            
            #line 133 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n            {\r\n                foreach (var item in ");
            
            #line 135 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(") \r\n                { \r\n                    url += string.Format(\"");
            
            #line 137 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("={0}&\", Uri.EscapeUriString(item.ToString())); \r\n                }\r\n");
            
            #line 139 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
            else
            {

            
            #line default
            #line hidden
            this.Write("            url += string.Format(\"");
            
            #line 144 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("={0}&\", Uri.EscapeUriString(");
            
            #line 144 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(" != null ? ");
            
            #line 144 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            
            #line 144 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
if (parameter.Type.EndsWith("?")){
            
            #line default
            #line hidden
            this.Write(".Value");
            
            #line 144 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write(".ToString() : \"null\"));\r\n");
            
            #line 145 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
        }


            
            #line default
            #line hidden
            this.Write("        using (var client = this.CreateClient())\r\n        {\r\n");
            
            #line 152 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"


        foreach (var parameter in operation.HeaderParameters)
        {

            
            #line default
            #line hidden
            this.Write("            client.DefaultRequestHeaders.TryAddWithoutValidation(\"");
            
            #line 157 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 157 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 158 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

        }

        if (operation.HasContent)
        {

            
            #line default
            #line hidden
            this.Write("            var response = await client.");
            
            #line 164 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.HttpMethodUpper == "Get" ? "GetAsync" : operation.HttpMethodUpper + "AsJsonAsync"));
            
            #line default
            #line hidden
            this.Write("(url, ");
            
            #line 164 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ContentParameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(", cancellationToken);\r\n");
            
            #line 165 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

        }
        else
        {
            if (operation.IsGetOrDelete)
            {

            
            #line default
            #line hidden
            this.Write("            var response = await client.");
            
            #line 172 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.HttpMethodUpper == "Get" ? "GetAsync" : operation.HttpMethodUpper + "AsJsonAsync"));
            
            #line default
            #line hidden
            this.Write("(url, cancellationToken);\r\n");
            
            #line 173 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
            else
            {
                if (operation.HasFormParameters)
                {

            
            #line default
            #line hidden
            this.Write("            var content = new MultipartFormDataContent();\r\n");
            
            #line 181 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

                    foreach (var parameter in operation.FormParameters)
                    {
                        if (parameter.IsNullable)
                        {

            
            #line default
            #line hidden
            this.Write("            if (");
            
            #line 187 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n");
            
            #line 188 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
                        }
                        else
                        {

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t\t\r\n            if (");
            
            #line 193 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(" == null)\r\n            {\r\n                throw new ArgumentNullException(\"");
            
            #line 195 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write("\");\r\n            }\r\n            else\r\n            {\r\n");
            
            #line 199 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
                        }

                        if (parameter.IsFile)
                        {

            
            #line default
            #line hidden
            this.Write("                content.Add(new StreamContent(");
            
            #line 205 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write("), \"");
            
            #line 205 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 206 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

                        }
                        else
                        {

            
            #line default
            #line hidden
            this.Write("                content.Add(new StringContent(");
            
            #line 211 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.VariableNameLower));
            
            #line default
            #line hidden
            this.Write(".ToString()), \"");
            
            #line 211 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 212 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
                        }
                    }
                }
                else
                {

            
            #line default
            #line hidden
            this.Write("            var content = new StringContent(string.Empty);\r\n");
            
            #line 220 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
                }

            
            #line default
            #line hidden
            this.Write(" \r\n            var response = await client.");
            
            #line 223 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.HttpMethodUpper));
            
            #line default
            #line hidden
            this.Write("AsJsonAsync(url, content, cancellationToken).ConfigureAwait(false);\r\n");
            
            #line 224 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
            }
        }

            
            #line default
            #line hidden
            this.Write("            var status = (int)response.StatusCode;\r\n            \r\n");
            
            #line 230 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

        foreach (var response in operation.Responses)
        {

            
            #line default
            #line hidden
            this.Write(" if (status == ");
            
            #line 234 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(response.StatusCode));
            
            #line default
            #line hidden
            this.Write(")\r\n            {\r\n");
            
            #line 236 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

            if (response.HasType)
            {
                if (response.IsFile)
                {
                    if (response.IsSuccess)
                    {

            
            #line default
            #line hidden
            this.Write("                return responseData; \r\n");
            
            #line 245 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
      
                    }
                    else
                    {

            
            #line default
            #line hidden
            this.Write("                throw new SwaggerException<byte[]>(\"A server side error occurred." +
                    "\", status.ToString(), responseData, responseData, null);\r\n");
            
            #line 251 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
      
                    } 
                }
                else
                {

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\r\n                ");
            
            #line 257 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(response.Type));
            
            #line default
            #line hidden
            this.Write(" result;\r\n                try\r\n                {\r\n                    result = aw" +
                    "ait response.Content.ReadAsAsync<");
            
            #line 260 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(response.Type));
            
            #line default
            #line hidden
            this.Write(">();\r\n");
            
            #line 261 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
      
                    if (response.IsSuccess) 
                    {

            
            #line default
            #line hidden
            this.Write(@"                    return result; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException(""Could not deserialize the response body."", status.ToString(), null, exception);
                }
");
            
            #line 271 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
      
                    }
                    else
                    {

            
            #line default
            #line hidden
            this.Write("                } \r\n                catch (Exception exception) \r\n               " +
                    " {\r\n                    throw new SwaggerException(\"Could not deserialize the re" +
                    "sponse body.\", status.ToString(), null, exception);\r\n                }\r\n");
            
            #line 281 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
          
                        if (response.TypeInheritsFromException)
                        {

            
            #line default
            #line hidden
            this.Write("                if (result == null)\r\n                {\r\n                    resul" +
                    "t = new ");
            
            #line 287 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(response.Type));
            
            #line default
            #line hidden
            this.Write("();\r\n                }\r\n\r\n                result.Data.Add(\"HttpStatus\", status);\r" +
                    "\n                result.Data.Add(\"ResponseData\", Encoding.UTF8.GetString(respons" +
                    "eData));\r\n                throw result;\r\n");
            
            #line 293 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
          
                        }
                        else
                        {

            
            #line default
            #line hidden
            this.Write("\r\n                throw new SwaggerException<");
            
            #line 299 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(response.Type));
            
            #line default
            #line hidden
            this.Write(">(\"A server side error occurred.\", status.ToString(), null, result, null);\r\n");
            
            #line 300 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
          
                        }
                    }
                }
            }
            else
            {
                if (operation.HasResultType)
                {

            
            #line default
            #line hidden
            this.Write("                return default(");
            
            #line 310 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.ResultType.Substring(5, operation.ResultType.Length - 6)));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 311 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

                }
                else
                {

            
            #line default
            #line hidden
            this.Write("                return;     \r\n");
            
            #line 317 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

                }
            }
            
            #line default
            #line hidden
            this.Write("            }\r\n            else");
            
            #line 321 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

        }

            
            #line default
            #line hidden
            this.Write("\r\n            {\r\n");
            
            #line 326 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"


        if (operation.HasDefaultResponse)
        {

            
            #line default
            #line hidden
            this.Write("                var result = default(");
            
            #line 331 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.DefaultResponse.Type));
            
            #line default
            #line hidden
            this.Write("); \r\n                try\r\n                {\r\n                    if (responseData" +
                    ".Length > 0)\r\n                    {\r\n                        result = JsonConver" +
                    "t.DeserializeObject<");
            
            #line 336 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.DefaultResponse.Type));
            
            #line default
            #line hidden
            this.Write(">(Encoding.UTF8.GetString(responseData));\r\n                    }\r\n\r\n");
            
            #line 339 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
        if (operation.HasOnlyDefaultResponse)
        {

            
            #line default
            #line hidden
            this.Write("                    if (status.Length == 3 && status.StartsWith(\"2\"))\r\n          " +
                    "          {\r\n                        return result;\r\n                    }\r\n");
            
            #line 347 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
  
        }

            
            #line default
            #line hidden
            this.Write(@"                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException(""Could not deserialize the response body."", status.ToString(), responseData, exception);
                }

                throw new SwaggerException<");
            
            #line 356 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.DefaultResponse.Type));
            
            #line default
            #line hidden
            this.Write(">(\"A server side error occurred.\", status.ToString(), responseData, result, null)" +
                    ";\r\n");
            
            #line 357 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write(@"            }

            var responseData = await response.Content.ReadAsByteArrayAsync();
            throw new SwaggerException(""The HTTP status code of the response was not expected ("" + (int)response.StatusCode + "")."", status.ToString(), responseData, null);
        }
    }

");
            
            #line 367 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write(@"    private HttpClient CreateClient()
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri(this.BaseUrl);
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(""application/json""));
        return client;
    }
}
");
            
            #line 379 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

}
}

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 384 "C:\Development\NSwag\src\NSwag.CodeGeneration\CodeGenerators\CSharp\Templates\ClientTemplate.tt"

    public string GenerateParameters(OperationModel op, bool shouldIncludeCancellationToken)
    {
        var sb = new System.Text.StringBuilder();
        foreach (var p in op.Parameters)
        {
            sb.Append($"{p.Type} {p.VariableNameLower}");
            if (!p.IsLast || shouldIncludeCancellationToken)
            {
                sb.Append(", ");
            }

        }
        
        if (shouldIncludeCancellationToken)
        {
            sb.Append("CancellationToken cancellationToken");
        }

        return sb.ToString();
    }

    public void GenerateMethodDocumentation(OperationModel operation, bool shouldIncludeCancellationToken)
    {
        if (operation.HasSummary)
        {
            WriteLine("    /// <summary>");
            WriteLine($"    /// {ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)}");
            WriteLine("    /// </summary>");
        }

        foreach (var parameter in operation.Parameters) 
        {
            if (parameter.HasDescription)
            {
                WriteLine($"    /// <param name=\"{parameter.VariableNameLower}\">{ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)}</param>");
            }
        }

        if (shouldIncludeCancellationToken)
        {
            WriteLine("    /// <param name=\"cancellationToken\">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>");
        }

        if (operation.HasResultDescription)
        {
            WriteLine($"    /// <returns>{ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)}</returns>");
        }

        WriteLine("    /// <exception cref=\"SwaggerException\">A server side error occurred.</exception>");
    }

    public void GenerateMethodSignature(OperationModel operation, bool shouldIncludeCancellationToken)
    {
        if (operation.IsDeprecated)
        {
            WriteLine("[Obsolete]");
        }
        
        Write($"{operation.ResultType} {operation.OperationNameUpper}Async({GenerateParameters(operation, shouldIncludeCancellationToken)})");
    }
 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    internal class ClientTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
