<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v<#=SwaggerService.ToolchainVersion#> (http://NSwag.org)
// </auto-generated>
//----------------------


namespace <#=Model.Namespace#>
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Globalization;
    using System.Net.Http;
    using System.Net.Http.Headers;
    using System.Runtime.CompilerServices;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Text;
    using Newtonsoft.Json;
<#foreach(var usage in Model.NamespaceUsages){    #>using <#=usage#>;
<#}#>


    <#=ConversionUtilities.Tab(Model.Clients, 1)#>

<#if(Model.GenerateContracts){#>
    <#=ConversionUtilities.Tab(Model.Classes, 1)#>

    [GeneratedCode("NSwag", "<#=SwaggerService.ToolchainVersion#>")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "<#=SwaggerService.ToolchainVersion#>")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException) 
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }
<#}#>

}