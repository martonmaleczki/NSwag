<#@ template visibility="internal" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="NJsonSchema.CodeGeneration" #>
<#@ import namespace="NSwag.CodeGeneration.CodeGenerators.Models" #>
<#if (Model.HasOperations)
{
    if (Model.GenerateContracts && Model.GenerateClientInterfaces)
    {
#>
public partial interface I<#=Model.Class#>
{
<#
        foreach (var operation in Model.Operations)
        {
            GenerateMethodDocumentation(operation, false);
            GenerateMethodSignature(operation, false);
            Write(";");

            GenerateMethodDocumentation(operation, true);
            GenerateMethodSignature(operation, true);
            Write(";");
        }
#>
}
<#
    }

    if (Model.GenerateImplementation)
    {
#>

public partial class <#=Model.Class#> <#if (Model.HasBaseType){#>: <#}#><#if (Model.HasBaseClass){#><#=Model.BaseClass#><#if (Model.GenerateClientInterfaces){#>, <#}#><#}#><#if (Model.GenerateClientInterfaces){#>I<#=Model.Class#><#}#>

{
    public <#=Model.Class#>() : this("<#=Model.BaseUrl#>") { }

    public <#=Model.Class#>(string baseUrl)
    {
        BaseUrl = baseUrl; 
    }

    public string BaseUrl { get; set; }

<#
    foreach (var operation in Model.Operations)
    {
        GenerateMethodDocumentation(operation, false);
        Write("    public ");
        GenerateMethodSignature(operation, false);
#>

    {
        return <#=operation.OperationNameUpper#>Async(<#foreach (var parameter in operation.Parameters){#><#=parameter.VariableNameLower#>, <#}#>CancellationToken.None);
    }

<#
        GenerateMethodDocumentation(operation, true);
        Write("    public async ");
        GenerateMethodSignature(operation, true);
#>
    
    {
        var url = "<#=operation.Path#>?";
<#
        foreach (var parameter in operation.PathParameters)
        {
#>
        if (<#=parameter.VariableNameLower#> == null)
        {
            throw new ArgumentNullException("<#=parameter.VariableNameLower#>");
        }

<#  
            if (parameter.IsDateArray)
            {
#>
        url = url.Replace("{<#=parameter.Name#>}", Uri.EscapeUriString(string.Join(",", <#=parameter.VariableNameLower#>.Select(s => s.ToString("s", CultureInfo.InvariantCulture)))));
<#  
            }
            else if (parameter.IsDate)
            {
#>							
        url = url.Replace("{<#=parameter.Name#>}", Uri.EscapeUriString(<#=parameter.VariableNameLower#>.ToString("s", CultureInfo.InvariantCulture)));
<#  
            }
            else if (parameter.IsArray)
            {
#>
        url = url.Replace("{<#=parameter.Name#>}", Uri.EscapeUriString(string.Join(",", <#=parameter.VariableNameLower#>.Select(s => s.ToString()))));
<#
            }
            else
            {
#>
        url = url.Replace("{<#=parameter.Name#>}", Uri.EscapeUriString(<#=parameter.VariableNameLower#>.ToString()));
<#  
            }
        }

        foreach (var parameter in operation.QueryParameters)
        {
            if (!parameter.IsNullable)
            {
#>						
        if (<#=parameter.VariableNameLower#> == null)
        {
            throw new ArgumentNullException("<#=parameter.VariableNameLower#>");
        }
<#  
            }

  
            if (parameter.IsDateArray)
            {
#>
        if (<#=parameter.VariableNameLower#> != null)
        {
            foreach (var item in <#=parameter.VariableNameLower#>) 
            { 
                url += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeUriString(item.ToString("s", CultureInfo.InvariantCulture))); 
            }
<#  
            }
            else if (parameter.IsDate)
            {
#>
            url += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeUriString(<#=parameter.VariableNameLower#> != null ? <#=parameter.VariableNameLower#><#if (parameter.Type.EndsWith("?")){#>.Value<#}#>.ToString("s", CultureInfo.InvariantCulture) : "null"));
<#  
            }
            else if (parameter.IsArray)
            {
#>							
            if (<#=parameter.VariableNameLower#> != null)
            {
                foreach (var item in <#=parameter.VariableNameLower#>) 
                { 
                    url += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeUriString(item.ToString())); 
                }
<#  
            }
            else
            {
#>
            url += string.Format("<#=parameter.Name#>={0}&", Uri.EscapeUriString(<#=parameter.VariableNameLower#> != null ? <#=parameter.VariableNameLower#><#if (parameter.Type.EndsWith("?")){#>.Value<#}#>.ToString() : "null"));
<#  
            }
        }

#>
        using (var client = this.CreateClient())
        {
<#

        foreach (var parameter in operation.HeaderParameters)
        {
#>
            client.DefaultRequestHeaders.TryAddWithoutValidation("<#=parameter.Name#>", <#=parameter.VariableNameLower#>);
<#
        }

        if (operation.HasContent)
        {
#>
            var response = await client.<#=operation.HttpMethodUpper == "Get" ? "GetAsync" : operation.HttpMethodUpper + "AsJsonAsync"#>(url, <#=operation.ContentParameter.VariableNameLower#>, cancellationToken);
<#
        }
        else
        {
            if (operation.IsGetOrDelete)
            {
#>
            var response = await client.<#=operation.HttpMethodUpper == "Get" ? "GetAsync" : operation.HttpMethodUpper + "AsJsonAsync"#>(url, cancellationToken);
<#  
            }
            else
            {
                if (operation.HasFormParameters)
                {
#>
            var content = new MultipartFormDataContent();
<#
                    foreach (var parameter in operation.FormParameters)
                    {
                        if (parameter.IsNullable)
                        {
#>
            if (<#=parameter.VariableNameLower#> != null)
<#  
                        }
                        else
                        {
#>												
            if (<#=parameter.VariableNameLower#> == null)
            {
                throw new ArgumentNullException("<#=parameter.VariableNameLower#>");
            }
            else
            {
<#  
                        }

                        if (parameter.IsFile)
                        {
#>
                content.Add(new StreamContent(<#=parameter.VariableNameLower#>), "<#=parameter.Name#>");
<#
                        }
                        else
                        {
#>
                content.Add(new StringContent(<#=parameter.VariableNameLower#>.ToString()), "<#=parameter.Name#>");
<#  
                        }
                    }
                }
                else
                {
#>
            var content = new StringContent(string.Empty);
<#  
                }
#> 
            var response = await client.<#=operation.HttpMethodUpper#>AsJsonAsync(url, content, cancellationToken).ConfigureAwait(false);
<#  
            }
        }
#>
            var status = (int)response.StatusCode;
            
<#
        foreach (var response in operation.Responses)
        {
#>
 if (status == <#=response.StatusCode#>)
            {
<#
            if (response.HasType)
            {
                if (response.IsFile)
                {
                    if (response.IsSuccess)
                    {
#>
                return responseData; 
<#      
                    }
                    else
                    {
#>
                throw new SwaggerException<byte[]>("A server side error occurred.", status.ToString(), responseData, responseData, null);
<#      
                    } 
                }
                else
                {
#>							
                <#=response.Type#> result;
                try
                {
                    result = await response.Content.ReadAsAsync<<#=response.Type#>>();
<#      
                    if (response.IsSuccess) 
                    {
#>
                    return result; 
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status.ToString(), null, exception);
                }
<#      
                    }
                    else
                    {
#>
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status.ToString(), null, exception);
                }
<#          
                        if (response.TypeInheritsFromException)
                        {
#>
                if (result == null)
                {
                    result = new <#=response.Type#>();
                }

                result.Data.Add("HttpStatus", status);
                result.Data.Add("ResponseData", Encoding.UTF8.GetString(responseData));
                throw result;
<#          
                        }
                        else
                        {
#>

                throw new SwaggerException<<#=response.Type#>>("A server side error occurred.", status.ToString(), null, result, null);
<#          
                        }
                    }
                }
            }
            else
            {
                if (operation.HasResultType)
                {
#>
                return default(<#=operation.ResultType.Substring(5, operation.ResultType.Length - 6)#>);
<#
                }
                else
                {
#>
                return;     
<#
                }
            }#>
            }
            else<#
        }
#>

            {
<#

        if (operation.HasDefaultResponse)
        {
#>
                var result = default(<#=operation.DefaultResponse.Type#>); 
                try
                {
                    if (responseData.Length > 0)
                    {
                        result = JsonConvert.DeserializeObject<<#=operation.DefaultResponse.Type#>>(Encoding.UTF8.GetString(responseData));
                    }

<#  
        if (operation.HasOnlyDefaultResponse)
        {
#>
                    if (status.Length == 3 && status.StartsWith("2"))
                    {
                        return result;
                    }
<#  
        }
#>
                } 
                catch (Exception exception) 
                {
                    throw new SwaggerException("Could not deserialize the response body.", status.ToString(), responseData, exception);
                }

                throw new SwaggerException<<#=operation.DefaultResponse.Type#>>("A server side error occurred.", status.ToString(), responseData, result, null);
<#
    }
#>
            }

            var responseData = await response.Content.ReadAsByteArrayAsync();
            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response.StatusCode + ").", status.ToString(), responseData, null);
        }
    }

<#
}
#>
    private HttpClient CreateClient()
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri(this.BaseUrl);
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        return client;
    }
}
<#
}
}
#>

<#+
    public string GenerateParameters(OperationModel op, bool shouldIncludeCancellationToken)
    {
        var sb = new System.Text.StringBuilder();
        foreach (var p in op.Parameters)
        {
            sb.Append($"{p.Type} {p.VariableNameLower}");
            if (!p.IsLast || shouldIncludeCancellationToken)
            {
                sb.Append(", ");
            }

        }
        
        if (shouldIncludeCancellationToken)
        {
            sb.Append("CancellationToken cancellationToken");
        }

        return sb.ToString();
    }

    public void GenerateMethodDocumentation(OperationModel operation, bool shouldIncludeCancellationToken)
    {
        if (operation.HasSummary)
        {
            WriteLine("    /// <summary>");
            WriteLine($"    /// {ConversionUtilities.ConvertCSharpDocBreaks(operation.Summary, 1)}");
            WriteLine("    /// </summary>");
        }

        foreach (var parameter in operation.Parameters) 
        {
            if (parameter.HasDescription)
            {
                WriteLine($"    /// <param name=\"{parameter.VariableNameLower}\">{ConversionUtilities.ConvertCSharpDocBreaks(parameter.Description, 1)}</param>");
            }
        }

        if (shouldIncludeCancellationToken)
        {
            WriteLine("    /// <param name=\"cancellationToken\">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>");
        }

        if (operation.HasResultDescription)
        {
            WriteLine($"    /// <returns>{ConversionUtilities.ConvertCSharpDocBreaks(operation.ResultDescription, 1)}</returns>");
        }

        WriteLine("    /// <exception cref=\"SwaggerException\">A server side error occurred.</exception>");
    }

    public void GenerateMethodSignature(OperationModel operation, bool shouldIncludeCancellationToken)
    {
        if (operation.IsDeprecated)
        {
            WriteLine("[Obsolete]");
        }
        
        Write($"{operation.ResultType} {operation.OperationNameUpper}Async({GenerateParameters(operation, shouldIncludeCancellationToken)})");
    }
 #>
